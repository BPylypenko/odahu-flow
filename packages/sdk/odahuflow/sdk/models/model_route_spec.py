# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from odahuflow.sdk.models.base_model_ import Model
from odahuflow.sdk.models.model_deployment_target import ModelDeploymentTarget  # noqa: F401,E501
from odahuflow.sdk.models import util


class ModelRouteSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, attempts: int=None, mirror: str=None, model_deployments: List[ModelDeploymentTarget]=None, per_try_timeout: int=None, url_prefix: str=None):  # noqa: E501
        """ModelRouteSpec - a model defined in Swagger

        :param attempts: The attempts of this ModelRouteSpec.  # noqa: E501
        :type attempts: int
        :param mirror: The mirror of this ModelRouteSpec.  # noqa: E501
        :type mirror: str
        :param model_deployments: The model_deployments of this ModelRouteSpec.  # noqa: E501
        :type model_deployments: List[ModelDeploymentTarget]
        :param per_try_timeout: The per_try_timeout of this ModelRouteSpec.  # noqa: E501
        :type per_try_timeout: int
        :param url_prefix: The url_prefix of this ModelRouteSpec.  # noqa: E501
        :type url_prefix: str
        """
        self.swagger_types = {
            'attempts': int,
            'mirror': str,
            'model_deployments': List[ModelDeploymentTarget],
            'per_try_timeout': int,
            'url_prefix': str
        }

        self.attribute_map = {
            'attempts': 'attempts',
            'mirror': 'mirror',
            'model_deployments': 'modelDeployments',
            'per_try_timeout': 'per_try_timeout',
            'url_prefix': 'urlPrefix'
        }

        self._attempts = attempts
        self._mirror = mirror
        self._model_deployments = model_deployments
        self._per_try_timeout = per_try_timeout
        self._url_prefix = url_prefix

    @classmethod
    def from_dict(cls, dikt) -> 'ModelRouteSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ModelRouteSpec of this ModelRouteSpec.  # noqa: E501
        :rtype: ModelRouteSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempts(self) -> int:
        """Gets the attempts of this ModelRouteSpec.

        Number of retries for a given request. The interval between retries will be determined automatically (25ms+).  # noqa: E501

        :return: The attempts of this ModelRouteSpec.
        :rtype: int
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts: int):
        """Sets the attempts of this ModelRouteSpec.

        Number of retries for a given request. The interval between retries will be determined automatically (25ms+).  # noqa: E501

        :param attempts: The attempts of this ModelRouteSpec.
        :type attempts: int
        """

        self._attempts = attempts

    @property
    def mirror(self) -> str:
        """Gets the mirror of this ModelRouteSpec.

        Mirror HTTP traffic to a another Model deployment in addition to forwarding the requests to the model deployments.  # noqa: E501

        :return: The mirror of this ModelRouteSpec.
        :rtype: str
        """
        return self._mirror

    @mirror.setter
    def mirror(self, mirror: str):
        """Sets the mirror of this ModelRouteSpec.

        Mirror HTTP traffic to a another Model deployment in addition to forwarding the requests to the model deployments.  # noqa: E501

        :param mirror: The mirror of this ModelRouteSpec.
        :type mirror: str
        """

        self._mirror = mirror

    @property
    def model_deployments(self) -> List[ModelDeploymentTarget]:
        """Gets the model_deployments of this ModelRouteSpec.

        A http rule can forward traffic to Model Deployments.  # noqa: E501

        :return: The model_deployments of this ModelRouteSpec.
        :rtype: List[ModelDeploymentTarget]
        """
        return self._model_deployments

    @model_deployments.setter
    def model_deployments(self, model_deployments: List[ModelDeploymentTarget]):
        """Sets the model_deployments of this ModelRouteSpec.

        A http rule can forward traffic to Model Deployments.  # noqa: E501

        :param model_deployments: The model_deployments of this ModelRouteSpec.
        :type model_deployments: List[ModelDeploymentTarget]
        """

        self._model_deployments = model_deployments

    @property
    def per_try_timeout(self) -> int:
        """Gets the per_try_timeout of this ModelRouteSpec.

        Timeout per retry attempt for a given request. Integer in seconds  # noqa: E501

        :return: The per_try_timeout of this ModelRouteSpec.
        :rtype: int
        """
        return self._per_try_timeout

    @per_try_timeout.setter
    def per_try_timeout(self, per_try_timeout: int):
        """Sets the per_try_timeout of this ModelRouteSpec.

        Timeout per retry attempt for a given request. Integer in seconds  # noqa: E501

        :param per_try_timeout: The per_try_timeout of this ModelRouteSpec.
        :type per_try_timeout: int
        """

        self._per_try_timeout = per_try_timeout

    @property
    def url_prefix(self) -> str:
        """Gets the url_prefix of this ModelRouteSpec.

        URL prefix for model  For example: /custom/test Prefix must start with slash \"/feedback\" and \"/model\" are reserved for internal usage  # noqa: E501

        :return: The url_prefix of this ModelRouteSpec.
        :rtype: str
        """
        return self._url_prefix

    @url_prefix.setter
    def url_prefix(self, url_prefix: str):
        """Sets the url_prefix of this ModelRouteSpec.

        URL prefix for model  For example: /custom/test Prefix must start with slash \"/feedback\" and \"/model\" are reserved for internal usage  # noqa: E501

        :param url_prefix: The url_prefix of this ModelRouteSpec.
        :type url_prefix: str
        """

        self._url_prefix = url_prefix
