#
#    Copyright 2017 EPAM Systems
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
worker_processes  1;

events {
    worker_connections  1024;
}

http{

  include       mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;

  resolver {{env "DOCKER_RESOLVER"}};

  lua_package_path "/usr/local/share/lua/5.3/?.lua";

  init_by_lua_block {
    local statistics_sender = require "statistics_sender"
    statistics_sender.init()
  }

  {{range services}} {{$name := .Name}} {{$service := service .Name}}
  {{if (.Tags | contains "model") }}
  upstream {{$name}} {
    zone upstream-{{$name}} 64k;
    {{range $service}}server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;
    {{else}}server 127.0.0.1:65535; # force a 502{{end}}
  }
  {{end}}
  {{end}}

  server {
    listen 80;
    server_name edge;
    client_max_body_size 0; # disable any limits to avoid HTTP 413 for large image uploads

    chunked_transfer_encoding on;

    location / {
      auth_basic off;
      proxy_pass http://legion:5000;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Authorization  "";
      proxy_read_timeout 900;
    }

    # Main services
    location /jupyter {
	    proxy_pass http://jupyter:8888;

	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
        proxy_redirect off;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }

    location /grafana {
        proxy_pass         http://grafana:3000;
        rewrite

        ^/grafana/(.*)  /$1 break;
        proxy_set_header   Host $host;
    }

    location /jenkins/ {
		proxy_pass http://jenkins:8080/jenkins/;

		sendfile off;

		proxy_set_header   Host             $host:$server_port;
		proxy_set_header   X-Real-IP        $remote_addr;
		proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
		proxy_max_temp_file_size 0;

		client_max_body_size       10m;
		client_body_buffer_size    128k;

		proxy_connect_timeout      90;
		proxy_send_timeout         90;
		proxy_read_timeout         90;

		proxy_buffer_size          4k;
		proxy_buffers              4 32k;
		proxy_busy_buffers_size    64k;
		proxy_temp_file_write_size 64k;

		proxy_http_version 1.1;
		proxy_request_buffering off;
	}


    # Models API
    {{range services}} {{$name := .Name}}
    {{if (.Tags | contains "model")}}
    location /model/{{$name}} {
        proxy_pass http://{{$name}};

        expires -1;
        add_header Cache-Control no-cache;

        log_by_lua_block {
            local statistics_sender = require "statistics_sender"
            local latency = math.floor((ngx.now() - ngx.req.start_time()) * 1000)
            statistics_sender.send_request_statistics("{{$name}}", latency)
        }
    }

    {{end}}
    {{end}}
  }
}
