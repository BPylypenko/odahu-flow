# For versions of nginx > 1.3.9 that include chunked transfer encoding support
# Replace with appropriate values where necessary
worker_processes  1;

events {
    worker_connections  1024;
}

http{

  include       mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;

  lua_package_path "/usr/local/share/lua/5.3/?.lua";

  {{range services}} {{$name := .Name}} {{$service := service .Name}}
  {{if (.Tags | contains "model") }}
  upstream {{$name}} {
    zone upstream-{{$name}} 64k;
    {{range $service}}server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;
    {{else}}server 127.0.0.1:65535; # force a 502{{end}}
  }
  {{end}}
  {{end}}

  server {
    listen 80;
    server_name edge;
    client_max_body_size 0; # disable any limits to avoid HTTP 413 for large image uploads

    chunked_transfer_encoding on;

    location / {
      auth_basic off;
      proxy_pass http://legion:5000;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Authorization  "";
      proxy_read_timeout 900;
    }

    # Main services
    location /jupyter {
	    proxy_pass http://jupyter:8888;

	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
        proxy_redirect off;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }

    location /grafana {
        proxy_pass         http://grafana:3000;
        rewrite

        ^/grafana/(.*)  /$1 break;
        proxy_set_header   Host $host;
    }

    # Models API
    {{range services}} {{$name := .Name}}
    {{if (.Tags | contains "model")}}
    location /api/model/{{$name}} {
        proxy_pass http://{{$name}};

        expires -1;
        add_header Cache-Control no-cache;

        content_by_lua '
            Statsd = require "resty_statsd"
            local conn, err = Statsd({
                host = "graphite",
                port = 8125,
                namespace = "legion.edge.model"
            })
            conn1.counter("{{$name}}.request.count", 1, 1)
            conn1.histogram("{{$name}}.request.time", (ngx.now() - ngx.req.start_time()) * 1000)
        ';

    }
    {{end}}
    {{end}}
  }
}
