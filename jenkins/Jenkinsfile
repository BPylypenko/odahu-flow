/**
 *   Copyright 2017 EPAM Systems
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
import jenkins.model.Jenkins;
import jenkins.model.JenkinsLocationConfiguration;
import hudson.plugins.git.GitSCM;
import hudson.plugins.git.BranchSpec;
import org.jenkinsci.plugins.workflow.job.WorkflowJob;
import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition;
import hudson.model.StringParameterDefinition;
import hudson.model.ParametersDefinitionProperty;
import hudson.model.ParameterDefinition;



@NonCPS
def removeOld(){
    items = Jenkins.instance.getItems(org.jenkinsci.plugins.workflow.job.WorkflowJob);
    for ( int i = 0; i < items.size; i++ ) {
        it = items[i];
        println "Processing ${it.name}"
        if (it.name.startsWith('MODEL (DYNAMIC)') || it.name.startsWith('Performance test MODEL')){
            println "Removing ${it.name}"
            it.delete();
        }
        println "Processed ${it.name}"
        it = null;
    }
	println "All jobs processed"
	items = null;
}


def addStringProperties(jobName, props){
    Jenkins.instance.getItemByFullName(jobName).addProperty(
        new ParametersDefinitionProperty(
            props.collect { new StringParameterDefinition(it.name, it.defaultValue, it.description) }
        )
    );
}


def createNewJob(name, path, prefix, addTestProperties){
    println "Start creating job for founded file ${path}"
    name = prefix + ' ' + name;
    
    // Create job if not exist
    if (Jenkins.instance.getItemByFullName(name) == null){
        scm = new GitSCM("https://github.com/akharlamov/drun-examples.git");
        scm.branches = [new BranchSpec("*/master")];
        Jenkins.instance.add(new WorkflowJob(Jenkins.instance, name), name);
        Jenkins.instance.getItemByFullName(name).definition = new CpsScmFlowDefinition(scm, path);

        if (addTestProperties){
            addStringProperties(name, [
                [name:"testUsers", defaultValue:"20", description:"number of Locust users to spawn"],
                [name:"testHatchRate", defaultValue:"2", description:"number of users to spawn per second"],
                [name:"testRequestsCount", defaultValue:"10000", description:"number of users to spawn per second"],
                [name:"host", defaultValue:"http://edge:90", description:"host with model, for example: http://edge:90"],
            ]);
        }

        println 'Job created ' + name;
    }
    
    return name
}

def names = []

node { 
    stage('Clone repos') {
        sh '''
        rm -rf Examples
        '''
        dir('Examples') {
            checkout([
            $class: 'GitSCM',
            branches: [[name: env.DRUN_EXAMPLES_COMMIT ]],
            userRemoteConfigs: [[url: 'https://github.com/akharlamov/drun-examples.git']]
            ])
        }
    }
    /*
    stage('Remove old dynamic jobs'){
        removeOld()
    }*/
    stage('Find Jenkins files for building'){
        files = findFiles(glob: 'Examples/**/Jenkinsfile')
        for ( int i = 0; i < files.length; i++ ) {
            it = files[i];
            path = it.getPath().substring(9);
            nameParts = path.split("/");
            name = nameParts.length > 1 ? nameParts[0] : path
            if (path[0] != '/')
                names << createNewJob(name, path, 'MODEL (DYNAMIC)', false)
            it = null;
        }
            
        files = null;
    }
    stage('Find Jenkins files for performance testing'){
        files = findFiles(glob: 'Examples/**/performance.Jenkinsfile')
        for ( int i = 0; i < files.length; i++ ) {
            it = files[i];
            path = it.getPath().substring(9);
            nameParts = path.split("/");
            name = nameParts.length > 1 ? nameParts[0] : path
            if (path[0] != '/')
                createNewJob(name, path, 'Performance test MODEL', true)
            it = null;
        }

        files = null;
    }
    names.each {
        stage('Run dynamic job: ' + it){
            build job: it //, parameters: [[$class: 'StringParameterValue', name: 'systemname', value: systemname]]
        }
    }
}
